{"version":3,"sources":["Components/TodoItems/TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["TodoItems","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createTasks","bind","assertThisInitialized","item","_this2","react_default","a","createElement","onClick","delete","key","text","listItems","entries","map","className","react_flip_move_es","duration","easing","Component","App","state","items","addItem","deleteItem","event","_inputElement","value","newItem","Date","now","setState","prevState","concat","preventDefault","filteredItems","filter","onSubmit","ref","placeholder","type","Components_TodoItems_TodoItems","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAiCeA,cA7BX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IAHJA,2EAMPU,GAAM,IAAAC,EAAAR,KACd,OAAOS,EAAAC,EAAAC,cAAA,MAAIC,QAAS,WAAOJ,EAAKK,OAAON,EAAKO,MAC5CA,IAAMP,EAAKO,KAAQP,EAAKQ,qCAGrBD,GACHd,KAAKJ,MAAMiB,OAAOC,oCAIlB,IACIE,EADchB,KAAKJ,MAAMqB,QACDC,IAAIlB,KAAKI,aAErC,OACIK,EAAAC,EAAAC,cAAA,MAAIQ,UAAW,QACXV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAUC,SAAU,IAAKC,OAAQ,YAC3BN,WAvBEO,aC6DTC,cA3Db,SAAAA,EAAY5B,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,IAChB3B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0B,GAAArB,KAAAH,KAAMJ,KAED6B,MAAQ,CACXC,MAAO,IAGT7B,EAAK8B,QAAU9B,EAAK8B,QAAQtB,KAAbP,OAAAQ,EAAA,EAAAR,CAAAD,IACfA,EAAK+B,WAAa/B,EAAK+B,WAAWvB,KAAhBP,OAAAQ,EAAA,EAAAR,CAAAD,IARFA,uEAWVgC,GACN,GAAgC,KAA7B7B,KAAK8B,cAAcC,MAAa,CACjC,IAAIC,EAAU,CACZjB,KAAMf,KAAK8B,cAAcC,MACzBjB,IAAKmB,KAAKC,OAGZlC,KAAKmC,SAAS,SAACC,GACb,MAAO,CACLV,MAAOU,EAAUV,MAAMW,OAAOL,MAIlChC,KAAK8B,cAAcC,MAAQ,GAE7BF,EAAMS,oDAGGxB,GACT,IAAIyB,EAAgBvC,KAAKyB,MAAMC,MAAMc,OAAO,SAAUjC,GACpD,OAAQA,EAAKO,MAAQA,IAGvBd,KAAKmC,SAAS,CACZT,MAAOa,qCAIH,IAAA/B,EAAAR,KACN,OACES,EAAAC,EAAAC,cAAA,OAAKQ,UAAW,OACdV,EAAAC,EAAAC,cAAA,OAAKQ,UAAW,UACdV,EAAAC,EAAAC,cAAA,QAAM8B,SAAUzC,KAAK2B,SACnBlB,EAAAC,EAAAC,cAAA,SAAO+B,IAAK,SAAChC,GAAD,OAAOF,EAAKsB,cAAgBpB,GACjCiC,YAAY,aAAaC,KAAK,SAErCnC,EAAAC,EAAAC,cAAA,UAAQiC,KAAK,UAAb,SAGJnC,EAAAC,EAAAC,cAACkC,EAAD,CACI5B,QAASjB,KAAKyB,MAAMC,MACpBb,OAAQb,KAAK4B,qBArDPL,aCQEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.417dafaf.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nclass TodoItems extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.createTasks = this.createTasks.bind(this)\r\n    }\r\n\r\n    createTasks(item) {\r\n        return <li onClick={() => {this.delete(item.key)       }}\r\n        key={ item.key }>{ item.text }</li>\r\n    }\r\n\r\n    delete(key) {\r\n        this.props.delete(key);\r\n    }\r\n\r\n    render() {\r\n        let todoEntries = this.props.entries;\r\n        let listItems = todoEntries.map(this.createTasks);\r\n\r\n        return (\r\n            <ul className={'list'}>\r\n                <FlipMove duration={250} easing={'ease-out'}>\r\n                    { listItems }\r\n                </FlipMove>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItems;","import React, { Component } from 'react';\nimport './App.css';\nimport TodoItems from './Components/TodoItems/TodoItems';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      items: []\n    };\n\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n  }\n\n  addItem(event) {\n    if(this._inputElement.value !== ''){\n      let newItem = {\n        text: this._inputElement.value,\n        key: Date.now()\n      };\n\n      this.setState((prevState) => {\n        return {\n          items: prevState.items.concat(newItem)\n        };\n      });\n\n      this._inputElement.value = '';\n    }\n    event.preventDefault();\n  }\n\n  deleteItem(key) {\n    var filteredItems = this.state.items.filter(function (item) {\n      return (item.key !== key)\n    });\n\n    this.setState({\n      items: filteredItems\n    })\n  }\n\n  render(){\n    return (\n      <div className={'App'}>\n        <div className={'header'}>\n          <form onSubmit={this.addItem}>\n            <input ref={(a) => this._inputElement = a}\n                   placeholder=\"enter task\" type=\"text\">\n            </input>\n            <button type=\"submit\">add</button>\n          </form>\n        </div>\n        <TodoItems\n            entries={this.state.items}\n            delete={this.deleteItem}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}